/* Custom properties */
/* 
  the colors are named like this instead of
  --clr-100 or something because we only have
  a few.

  the volor values are hsl. we're not including
  hsl and just writing `230 35% 7%` instead so that
  we can easily manipulate the colors' alpha values
  from code. if we wrote them like hsl(230 35% 7%), 
  we couldn't easily do that. now we can just write
  hsla(var(--clr-dark) / 0.5); using modern css to 
  change the alpha.

  using rem is great for accessibility, px can override
  some settings.

  with the fs, 400 is the base (the font size of the body).
*/
:root {
  /* colors */
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* font-sizes */
  /* 
    the clamp(min, mid, max) is used with the --fs-900
    and not with other font sizes because that one should
    changes a lot and we don't want to have @medias for each 
    time it needs to change it's value, we just want to clamp
    it to the min and max it can be. otherwise, we had a lot
    of overflowing issues with the huge space text. 

    the 1rem in the middle value is there because viewport
    units don't react to zooming in and out, but adding a
    rem value fixes that issue. 
  */
  --fs-900: clamp(5rem, 8vw + 1rem, 9.375rem);
  --fs-800: 6.25rem;
  --fs-700: 3.5rem;
  --fs-600: 2rem;
  --fs-500: 1rem;
  --fs-400: 1.125rem;
  --fs-300: 1rem;
  --fs-200: 0.875rem;

  /* font-families */
  --ff-serif: "Bellefair", serif;
  --ff-sans-cond: "Barlow Condensed", sans-serif;
  --ff-sans-normal: "Barlow", sans-serif;
}

@media (min-width: 35em) {
  :root {
    --fs-800: 5rem;
    --fs-700: 2.5rem;
    --fs-600: 1.5rem;
    --fs-500: 1.25rem;
    --fs-400: 1rem;
  }
}

@media (min-width: 45em) {
  :root {
    --fs-800: 6.25rem;
    --fs-700: 3.5rem;
    --fs-600: 2rem;
    --fs-500: 1.75rem;
    --fs-400: 1.125rem;
  }
}

/* Reset */
*,
*::before,
*::after {
  box-sizing: border-box;
}

body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture {
  margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  font-weight: 400;
}

body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  color: hsl(var(--clr-white));
  background-color: hsl(var(--clr-dark));
  line-height: 1.5;
  min-height: 100vh;

  display: grid;
  grid-template-rows: min-content 1fr;

  overflow-x: hidden;
}

img,
picture {
  max-width: 100%; /* this is so that the img's size changes depending on the width of the screen */
  display: block; /* this is to remove weird spacing issues with imgs */
}

input,
button,
textarea,
select {
  font: inherit;
}

/* remove animations for people who've turned them off */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Utility classes */

/* general */
.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--gap, 1rem);
}

.d-block {
  display: block;
}

/* 
  the :where pseudo-class is there to eliminate the extra
  specificity that the :not(:first-child) adds.

  because of the var(--flow-space, 1rem), we can specify
  what amount of margin-top we want as an inline style of
  an element.
*/
.flow > *:where(:not(:first-child)) {
  margin-top: var(--flow-space, 1rem);
}

/* 
  we could also have a .flow-space-1, .flow-space-2, etc. instead
  of .flow--space-small.
*/
.flow--space-small {
  --flow-space: 0.75rem;
}

.container {
  padding-inline: 2em;
  margin-inline: auto;
  max-width: 80rem;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.skip-to-content {
  position: absolute;
  z-index: 9999;
  background: hsl(var(--clr-white));
  color: hsl(var(--clr-dark));
  padding: 0.5em 1em;
  margin-inline: auto;
  transform: translateY(-100%);
  transition: transform 250ms ease-in;
}

/* 
  so that the skip-to-content link only appears if it's
  in focus.
*/
.skip-to-content:focus {
  transform: translateY(0);
}

/* colors */
.bg-dark {
  background-color: hsl(var(--clr-dark));
}
.bg-accent {
  background-color: hsl(var(--clr-light));
}
.bg-white {
  background-color: hsl(var(--clr-white));
}

.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}

/* typography */

.ff-serif {
  font-family: var(--ff-serif);
}
.ff-sans-cond {
  font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
  font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
  letter-spacing: 4.75px; /* using px because the letter spacing was very specific and we don't want it to change */
}
.letter-spacing-2 {
  letter-spacing: 2.7px;
}
.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.uppercase {
  text-transform: uppercase;
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}

.numbered-title {
  font-family: var(--ff-sans-cond);
  font-size: var(--fs-500);
  text-transform: uppercase;
  letter-spacing: 4.72px;
}

.numbered-title span {
  margin-right: 0.5em; /* relative to the font size */
  font-weight: 700;
  color: hsl(var(--clr-white) / 0.25);
}

/* Compontents */
.large-button {
  font-size: 2rem;
  display: inline-grid; /* the inline is so that the button doesn't grow to take up as much space as possible and it just stays the size it's supposed to */
  place-items: center; /* align items and justify items at the same time*/
  padding: 0 2em;
  border-radius: 50%;
  aspect-ratio: 1;
  text-decoration: none;
  position: relative;
  z-index: 1;
}

.large-button::after {
  content: "";
  position: absolute;
  z-index: -1;
  background: hsl(var(--clr-white) / 0.15);
  width: 100%;
  height: 100%;
  border-radius: 50%;
  opacity: 0;
  transition: opacity 500ms linear, transform 750ms ease-in-out;
}

/* 
  focus makes sure that we get the same effect if the
  button is tapped as opposed to hovered over.
*/
.large-button:hover::after,
.large-button:focus::after {
  opacity: 1;
  transform: scale(1.5);
}

/* primary-header */
.logo {
  margin: 1.5rem clamp(1.5rem, 5vw, 3.5rem);
}

.primary-header {
  justify-content: space-between;
  align-items: center;
}

.primary-navigation {
  --gap: clamp(1.5rem, 5vw, 3.5rem);
  --underline-gap: 2rem;
  list-style: none;
  padding: 0;
  margin: 0;
  background: hsl(var(--clr-dark) / 0.95);
}

.mobile-nav-toggle {
  display: none;
}

.primary-navigation a {
  text-decoration: none;
}

.primary-navigation a > span {
  font-weight: 700;
  margin-right: 0.5em;
}

/* 
  the @supports is there so that the styles below only
  work on browsers that support backdrop-filter: blur(1rem). 

  when using backdrop-filter: blur(), the bg-color can't
  be a pure color, it needs to have an opacity set to it.
*/
@supports (backdrop-filter: blur(1rem)) {
  .primary-navigation {
    background: hsl(var(--clr-white) / 0.05);
    backdrop-filter: blur(1.5rem);
  }
}

/* 
  the reason these mobile styles are in a media query
  instead of being the default like the rest of the mobile
  styles are is that we don't want to have to override
  the styles we set here in every navigation-related media
  query. 
*/
@media (max-width: 35em) {
  .primary-navigation {
    --underline-gap: 0.5rem;
    position: fixed; /* position: fixed takes this outside the page flow */
    z-index: 1000;
    inset: 0 0 0 30%; /* top bottom left and right */
    list-style: none;
    padding: min(20rem, 10vh) 2rem; /* the min(20rem, 10vh) is so that the navigation doesn't overflow on smaller screens, but the padding does grow on bigger screens */
    margin: 0;
    flex-direction: column;
    /* hiding the navigation before we click the hamburger menu */
    transform: translateX(100%);
    transition: transform 500ms ease-in-out;
  }

  .primary-navigation[data-visible="true"] {
    transform: translateX(0);
  }

  .primary-navigation.underline-indicators > * {
    border: 0;
  }

  .mobile-nav-toggle {
    display: block;
    position: absolute;
    z-index: 2000;
    right: 1rem;
    top: 2rem;
    background: transparent;
    background-image: url(./assets/shared/icon-hamburger.svg);
    background-repeat: no-repeat;
    background-position: center;
    width: 1.5rem;
    aspect-ratio: 1;
    border: 0;
  }

  .mobile-nav-toggle[aria-expanded="true"] {
    background-image: url(./assets/shared/icon-close.svg);
  }

  /* 
    this only works when th euser uses tab for navigating
    around the site.
  */
  .mobile-nav-toggle:focus-visible {
    outline: 5px solid white;
    outline-offset: 5px;
  }
}

@media (min-width: 35em) {
  .primary-navigation {
    /* 
      the middle value is the growth factor. the smaller
      it is, the slower the padding will grow.
      
      this would be better as a custom property, but we
      can't do that with this version of css???? 
    */
    padding-inline: clamp(3rem, 7vw, 7rem);
  }
}

/* for tablet */
@media (min-width: 35em) and (max-width: 44.999em) {
  .primary-navigation a > span {
    display: none;
  }
}

@media (min-width: 45em) {
  .primary-header::after {
    content: "";
    display: block;
    position: relative;
    height: 1px;
    width: 100%;
    margin-right: -2.5rem; /* so that the line goes on top of the navigation */
    background: hsl(var(--clr-white) / 0.25);
    order: 1;
  }

  nav {
    order: 2;
  }

  .primary-navigation {
    margin-block: 2rem;
  }
}

/* 
  .underline-indicators is a pretty generic class that
  we can use accross the site for any this type of underlines
  we need.

  it seems like the grouping effect of :is() resolved the
  issue because it effectively grouped the :hover and :focus
  states together, helping to address any specificity problems
  that might have occurred with *:hover alone. but idk what
  happened.
*/
.underline-indicators > * {
  cursor: pointer;
  padding: var(--underline-gap, 0.5rem) 0;
  border: 0;
  border-bottom: 0.2rem solid hsl(var(--clr-white) / 0);
  background-color: transparent;
}

.underline-indicators > *:is(:hover, :focus) {
  border-color: hsl(var(--clr-white) / 0.5);
}

.underline-indicators > .active,
.underline-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-white) / 1);
  border-color: hsl(var(--clr-white) / 1);
}

.tab-list {
  --gap: 2rem;
}

.dot-indicators > * {
  cursor: pointer;
  border: 0;
  border-radius: 50%;
  padding: 0.5em;
  background-color: hsl(var(--clr-white) / 0.25);
}

.dot-indicators > *:is(:hover, :focus) {
  background-color: hsl(var(--clr-white) / 0.5);
}

.dot-indicators > [aria-selected="true"] {
  background-color: hsl(var(--clr-white) / 1);
}

.number-indicators {
  flex-direction: column;
  align-items: center;
}

.number-indicators > * {
  border: 1px solid hsl(var(--clr-white) / 0.25);
  border-radius: 50%;
  padding: 0 1em;
  aspect-ratio: 1;
  cursor: pointer;
  background-color: hsl(var(--clr-dark));
  color: hsl(var(--clr-white));
}

.number-indicators > *:is(:hover, :focus) {
  border-color: hsl(var(--clr-white) / 1);
}

.number-indicators > *[aria-selected="true"] {
  background-color: hsl(var(--clr-white));
  color: hsl(var(--clr-dark));
}

/* Page specific background */
body {
  background-size: cover;
  background-position: bottom center;
}

/* home */
.home {
  background-image: url(./assets/home/background-home-mobile.jpg);
}

@media (min-width: 35em) {
  .home {
    background-position: center center;
    background-image: url(./assets/home/background-home-tablet.jpg);
  }
}

@media (min-width: 45em) {
  .home {
    background-image: url(./assets/home/background-home-desktop.jpg);
  }
}

/* destination */
.destination {
  background-image: url(./assets/destination/background-destination-mobile.jpg);
}

@media (min-width: 35rem) {
  .destination {
    background-position: center center;
    background-image: url(./assets/destination/background-destination-tablet.jpg);
  }
}

@media (min-width: 45rem) {
  .destination {
    background-image: url(./assets/destination/background-destination-desktop.jpg);
  }
}

/* crew */
.crew {
  background-image: url(./assets/home/background-crew-mobile.jpg);
}

@media (min-width: 35rem) {
  .crew {
    background-position: center center;
    background-image: url(./assets/crew/background-crew-tablet.jpg);
  }
}

@media (min-width: 45rem) {
  .crew {
    background-image: url(./assets/crew/background-crew-desktop.jpg);
  }
}

/* ----------------------------- */
/* Layout                        */
/* ----------------------------- */
/* 
  the grid container is set up like this specifically for
  this site. we can't just use the normal .contianer because
  some pages have images overflowing to the right of the 
  page and, because the .container has a padding, that wouldn't
  work.

  the 2em columns act as a kind of padding here like we have in 
  our normal .contianer.

  $
  the code below makes it so that, at smaller screens, using
  the minmax(2rem, 1fr), we have at least 2rem of "padding"
  on the sides, but, on bigger screens, when the 2 middle
  columns have already expanded to maximum (40 rem), the
  "padding" at the sides takes up all the rest of the available
  space so that everything is still centered:

  grid-template-columns: minmax(2rem, 1fr)
                         repeat(2, minmax(0, 40rem))
                         inmax(2rem,1fr);
  $

  we're using grid-container instead of using the existing
  .flex and .container classes because it's easier to control 
  the space a grid parent's children take up as opposed to how,
  with flex, we have to control the children't width from the
  children.
*/
.grid-container {
  display: grid;
  place-items: center; /* short for justify-items and align-items */
  text-align: center;
  padding-inline: 1rem; /* so that  the content can never touch the sides of the page */
  padding-bottom: 4rem;
}

.grid-container p:not([class]) {
  max-width: 50ch;
}

.numbered-title {
  grid-area: title;
}

/* destination layout */
.grid-container--destination {
  --flow-space: 2rem;
  grid-template-areas:
    "title"
    "image"
    "tabs"
    "content";
}

.grid-container--destination > picture {
  grid-area: image;
  max-width: 60%;
  align-self: start;
}

.grid-container--destination > .tab-list {
  grid-area: tabs;
}

.grid-container--destination > .destination-info {
  grid-area: content;
}

.destination-meta {
  flex-direction: column;
  border-top: 1px solid hsl(var(--clr-white) / 0.25);
  padding-top: 2.5rem;
  margin-top: 2.5rem;
}

.destination-meta p {
  font-size: 1.75rem;
}

/* crew layout */
.grid-container--crew {
  grid-template-areas:
    "title"
    "image"
    "tabs"
    "content";
}

.grid-container--crew > picture {
  grid-area: image;
  max-width: 60%;
  border-bottom: 1px solid hsl(var(--clr-white) / 0.1); /* we're using this in so many places that it could very well be turned into a utility class */
}

.grid-container--crew > .dot-indicators {
  grid-area: tabs;
}

.grid-container--crew > .crew-details {
  grid-area: content;
}

.crew-details h2 {
  opacity: 0.5;
}

@media (min-width: 35em) {
  .numbered-title {
    justify-self: start;
    margin-top: 2rem;
  }

  .destination-meta {
    flex-direction: row;
    justify-content: space-evenly; /* this is similar to space-around */
  }

  .grid-container--crew {
    padding-bottom: 0;
    --flow-space: 2rem;
    grid-template-areas:
      "title"
      "content"
      "tabs"
      "image";
  }
}

/* 760px */
@media (min-width: 45em) {
  .grid-container {
    text-align: left;
    column-gap: var(--container-gap, 2rem);
    grid-template-columns: minmax(2rem, 1fr) repeat(2, minmax(0, 40rem)) minmax(
        2rem,
        1fr
      );
  }

  /* 
    this is a modifier class (--) for styles that are 
    specific to the home page .grid-contianer.
  */
  .grid-container--home {
    padding-bottom: max(6rem, 20vh);
    align-items: end;
  }

  .grid-container--home > *:first-child {
    grid-column: 2;
  }

  .grid-container--home > *:last-child {
    grid-column: 3;
  }

  /* 
    The grid-template-areas below specifies the layout for
    a grid container with three rows and four columns:

    - The title will span the 2nd and 3rd columns in the
      first row.
    - The image and tabs will occupy the 2nd and 3rd columns
      of the second row.
    - The image and content will span the 2nd and 3rd columns
      of the third row.
    - The 1st and 4th columns will remain empty in each row.

    In CSS Grid, a period (.) in grid-template-areas represents
    an empty grid cell.
*/

  .grid-container--destination {
    justify-items: start;
    align-content: start; /* this will just keep all the content together at the top on tall/large screens instead of stretching apart */
    grid-template-areas:
      ". title title ."
      ". image tabs ."
      ". image content .";
  }

  .grid-container--destination > picture {
    max-width: 90%;
  }

  .destination-meta {
    /* 
      we're using the min() because the text inside here
      was overflowing as the screen got smaller because the
      gap was too big 
    */
    --gap: min(5vw, 6rem);
    justify-content: start;
  }

  .grid-container--crew {
    grid-template-columns: minmax(1rem, 1fr) minmax(0, 37rem) minmax(0, 23rem) minmax(
        1rem,
        1fr
      );
    justify-items: start;
    grid-template-areas:
      ". title title ."
      ". content image ."
      ". tabs image .";
  }

  .grid-container--crew > picture {
    grid-column: span 2;
    align-self: end;
    max-width: 90%;
  }
}
